{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\click-game\\\\click-game\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport pups from \"./cards.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.randomPups = this.shuffle(pups);\n    this.state = {\n      pups: this.randomPups,\n      puppyIds: [],\n      score: 0,\n      topScore: 0\n    };\n    this.newScore = this.state.score;\n    this.clickedPuppyIds = this.state.puppyIds;\n    this.topScore = this.state.topScore;\n\n    this.shuffleScoreCard = id => {\n      this.randomPups = this.shuffle(pups);\n      this.clickedPuppyIds = this.state.puppyIds;\n\n      if (this.clickedPuppyIds.some(pupId => pupId === id)) {\n        this.newScore = 0;\n        this.clickedPuppyIds = [];\n      } else {\n        this.newScore++;\n        this.clickedPuppyIds.push(id);\n        if (this.newScore > this.topScore) this.topScore = this.newScore;\n      }\n\n      this.setState(state => ({\n        pups: this.randomPups,\n        puppyIds: this.clickedPuppyIds,\n        score: this.newScore,\n        topScore: this.topScore\n      }));\n    };\n  }\n\n  shuffle(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"App-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, \"The Clickster\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"App-intro\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, \"Try not to click the same image twice!\")), /*#__PURE__*/React.createElement(Score, {\n      total: this.state.score,\n      topScore: this.state.topScore,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Wrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, this.state.pups.map(puppy => /*#__PURE__*/React.createElement(Card, {\n      shuffleScoreCard: this.shuffleScoreCard,\n      id: puppy.id,\n      key: puppy.id,\n      image: puppy.image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }))));\n  } //}\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/GitHub/click-game/click-game/src/App.js"],"names":["React","Component","Card","Wrapper","Score","pups","App","randomPups","shuffle","state","puppyIds","score","topScore","newScore","clickedPuppyIds","shuffleScoreCard","id","some","pupId","push","setState","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","render","map","puppy","image"],"mappings":"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","sourcesContent":["\nimport React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport pups from \"./cards.json\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n  randomPups = this.shuffle(pups);\n\n  // Setting this.state.pups to the cards json array\n  state = {\n    pups:this.randomPups,\n    puppyIds: [],\n    score: 0,\n    topScore: 0,\n  };\n\n  shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }\n\n  newScore = this.state.score;\n  clickedPuppyIds = this.state.puppyIds;\n  topScore = this.state.topScore;\n\n  shuffleScoreCard = (id) => {\n    this.randomPups = this.shuffle(pups);\n    this.clickedPuppyIds = this.state.puppyIds;\n    if(this.clickedPuppyIds.some(pupId => pupId === id))\n    {\n      this.newScore = 0;\n      this.clickedPuppyIds=[];\n    }\n    else\n    {\n      this.newScore++;\n      this.clickedPuppyIds.push(id);\n      if(this.newScore > this.topScore)\n        this.topScore = this.newScore;\n    }\n    this.setState(state => (\n      {\n        pups:this.randomPups,\n        puppyIds:this.clickedPuppyIds,\n        score: this.newScore,\n        topScore: this.topScore,\n      }));\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">The Clickster</h1>\n          <p className=\"App-intro\">\n            Try not to click the same image twice!\n          </p>\n        </header>\n        \n        <Score total={this.state.score}\n           topScore={this.state.topScore}\n        />\n        <Wrapper>\n          {this.state.pups.map(puppy => (\n            <Card\n              shuffleScoreCard={this.shuffleScoreCard}\n              id={puppy.id}\n              key={puppy.id}\n              image={puppy.image}\n            />\n          ))}\n        </Wrapper>\n        \n    </div>\n    );\n  }\n//}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}